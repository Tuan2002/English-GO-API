npm run migration:generate -- ./src/migrations/CreateUserTable
npm run migration:run
/** Users
 * id: string;
 * password: string;
 * email: string;
 * fullName: string;
 * phoneNumber: string;
 * avatar: string;
 * groupRoleId: string;
 * isBlocked: boolean;
 * isDeleted: boolean;
 * isActive: boolean;
 * createdDate: string;
 * updatedDate: string;
 */

/** groupRoles
 * id: string;
 * name: string;
 * displayName: string;
 * description: string;
 * isDeleted: boolean;
 * isActive: boolean;
 * createdDate: string;
 * updatedDate: string;
 */

/** functions
 * id: string;
 * name: string;
 * displayName: string;
 * description: string;
 * functionLink: string;
 * isDeleted: boolean;
 * isActive: boolean;
 * createdDate: string;
 * updatedDate: string;
 * parentId: string;
 */

/** permissions 
 * id: string;
 * roleId: string;
 * functionId: string;
 * isDeleted: boolean;
 * isActive: boolean;
 * createdDate: string;
 * updatedDate: string;
*/

/** professions 
 * id: string;
 * name: string;
 * description: string;
 * isDeleted: boolean;
 * isActive: boolean;
 * createdDate: string;
 * updatedDate: string;
*/

/** positions 
 * id: string;
 * name: string;
 * description: string;
 * isDeleted: boolean;
 * isActive: boolean;
 * createdDate: string;
 * updatedDate: string;
*/

/** Profile
 * id: string;
 * userId: string;
 * address: string;
 * description: string;
 * phoneNumber: string;
 * email: string;
 * birthday: string;
 * sex: string;
 * banner: string;
 * profession: string;
 * position: string;
*/

/** educations
 * id: string;
 * userId: string;
 * school: string;
 * specialzed: string;
 * start-time: string;
 * end-time: string;
 * isWorking: bool;
 * description: string;
*/

/** experiences
 * id: string;
 * userId: string;
 * company: string;
 * position: string;
 * start-time: string;
 * end-time: string;
 * isWorking: bool;
 * description: string;
*/

/** skills
 * id: string;
 * userId: string;
 * name: string;
 * level: string;
 * description: string;
*/

/** skillLevels
 * id: string;
 * level: string;
 * description: string;
*/

/** activities
 * id: string;
 * userId: string;
 * name: string;
 * organization: string;
 * position: string;
 * proofImage: string;
 * startTime: string;
 * endTime: string;
 * isActive: string;
 * description: string;
*/

/** certificates
 * id: string;
 * userId: string;
 * name: string;
 * organization: string;
 * proofImage: string;
 * startTime: string;
 * endTime: string;
 * description: string;
*/

/** awards
 * id: string;
 * userId: string;
 * name: string;
 * organization: string;
 * proofImage: string;
 * startTime: string;
 * endTime: string;
 * description: string;
*/

/** products
 * id: string;
 * userId: string;
 * name: string;
 * position: string;
 * profession: string;
 * proofImage: string;
 * startTime: string;
 * endTime: string;
 * description: string;
*/

/** cvCreateds
 * id: string;
 * userId: string;
 * name: string;
 * profession: string;
 * position: string;
 * appliedPosition: string;
 * cvSample: string;

 * avatar: string;
 * phoneNumber: string;
 * email: string;
 * facebook: string;
 * address: string;
 * fullName: string;
 * birthday: string;
 
 * infomationPosition: []
 * careerTarget: string;
 * referrer: [string $ string];
 * educations: [educationId];
 * experiences: [experienceId];
 * skills: [skillId];
 * activities: [activityId];
 * certificates: [certificateId];
 * awards: [awardId];
 * products: [productId];

 * proofImage: string;
 * createdDate: string;
 * updatedDate: string;
 * isActive: bool;
 * isPublic: bool;
*/

/** cvUploads
 * id: string;
 * userId: string;
 * name: string;
 * organization: string;
 * proofImage: string;
 * startTime: string;
 * endTime: string;
 * description: string;
*/

/** cvSamples
 * id: string;
 * userId: string;
 * name: string;
 * organization: string;
 * proofImage: string;
 * startTime: string;
 * endTime: string;
 * description: string;
*/

CVCreateds: [
  {
    id: string;
    displayName: string;
    fullName: string;
    avatar: string;
    position: string;

    infomations: {
      data: [
        {value: 'abc@gmail.com', icon: 'EmailIcon'},
        {value: 'address', icon: 'AddressIcon'},
        {value: 'phoneNumber', icon: 'phoneNumberIcon'},
        {value: 'birthday', icon: 'birthdayIcon'},
      ],
      position: 0,
      box: "box-0"
    },
    experiences: {
      data: [
        experienceId,
        experienceId
      ],
      position: 0,
      box: "box-1"
    },
    educations: {
      data: [
        educationId,
        educationId
      ],
      position: 1,
      box: "box-1"
    },
    awards: {
      data: [
        awardId,
        awardId
      ],
      position: 0,
      box: "box-2"
    }
  }
]

boxs: {
  box-0: [
    {
      name: 'infomations',
      data: []
    }
  ],
  box-1: [
    {
      name: 'educations',
      data: []
    },
    {
      name: 'awards',
      data: []
    }
  ]
}




executeQuery() => thực hiện câu lệnh select, trả về một tập hợp các kết quả
executeUpdate() => Thực hiện câu lệnh update, trả về số lượng các bản ghi bị ảnh hưởng, bị thay đổi.
execute() => thực hiện bất kì câu lệnh nào, trả về dữ liệu kiểu boolean


let title = `Current weather in ${data?.location?.name} - ${data?.location?.country} at ${data?.location?.localtime}\n`;
const formatNumber = ' '.repeat(15);
title +=
`${formatNumber}Condition  : ${data?.current?.condition?.text}\n` +
`${formatNumber}Temperature: ${data?.current?.temp_c}℃ / ${data?.current?.temp_f}℉\n` +
`${formatNumber}Humidity   : ${data?.current?.humidity} %\n` +
`${formatNumber}Cloud cover: ${data?.current?.cloud} %\n` +
`${formatNumber}Rainfall   : ${data?.current?.precip_mm} mm\n` +
`${formatNumber}UV         : ${data?.current?.uv}\n`;

return title;


let title = "Randoms cards from Tarot deck to know your future\n";
const formatNumber = ' '.repeat(4);
title += '';
data.cards.forEach((card) => {
  title += 
  `${formatNumber}- Name        : ${card.name}\n` +
  `${formatNumber}- Type        : ${card.type} \n` +
  `${formatNumber}- Value       : ${card.value_int}\n` +
  `${formatNumber}- Meaning Up  : ${card.meaning_up} \n` +
  `${formatNumber}- Meaning Rev : ${card.meaning_rev} \n` +
  `${formatNumber}- Description : ${card.desc} \n` +
  `${formatNumber}\n`;
})
return title

- Bài 1: Viết chương trình nhập vào 2 số a, b. Giải và biện luận nghiệm của phương trình bậc nhật ax + b =0;
- Bài 2: Viết chương trình nhập vào 3 số a, b, c. Giải và biện luận nghiệm của phương trình bậc hai a * x^2 + bx + c = 0
- Bài 3: Viết chương trình C++ để người dùng nhập vào 3 số nguyên và tìm số lớn nhất trong 3 số đó.
- Bài 4: Viết chương trình C++ xếp hạng học lực của học sinh dựa trên các điểm bài kiểm tra, điểm thi giữa kỳ, điểm thi cuối kỳ. 
    Nếu:
      Điểm trung bình >= 9.0 là hạng A.
      Điểm trung bình >=7.0 và < 9.0 là hạng B
      Điểm trung bình >=5.0 và < 7.0 là hạng C
      Điểm trung bình <5.0 là hạng F
- Bài 5: Cửa hàng của bạn nhận gửi bán sản phẩm cho một công ty khác và hưởng hoa hồng, với mức hoa hồng theo doanh số bán như sau:
      5% nếu tổng doanh số nhỏ hơn hoặc bằng 100 triệu.
      10% nếu tổng doanh số nhỏ hơn hoặc bằng 300 triệu.
      20 % nếu tổng doanh số là lớn hơn 300 triệu.
  Hãy viết chương trình C++ để tính hoa hồng bạn sẽ nhận được dựa trên doanh số bán hàng.      


// javis 03a867c2-063c-4d38-8f46-90536f732b50
// jokes a28498fe-3500-4476-9d5b-237b3d7ac2c2
// gemini ed68d03b-70e3-4008-b45a-7506d33129ef